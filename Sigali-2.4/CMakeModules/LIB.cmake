
# -------------------------------------------
# It prints arg in DEBUG MODE
# -------------------------------------------
MACRO(print arg)
  IF(DEFINED DEBUG_MODE)
    IF(${DEBUG_MODE})
      MESSAGE(${arg})
    ENDIF(${DEBUG_MODE})
  ENDIF(DEFINED DEBUG_MODE)
ENDMACRO(print arg)

# -------------------------------------------
# It visits a directory (arg) if it exists.
# -------------------------------------------
MACRO(pK_ADD_SUBDIRECTORY arg)
IF(EXISTS ${arg})
  ADD_SUBDIRECTORY (${arg})
ELSE(EXISTS ${arg})
  PRINT("pK_ADD_SUBDIRECTORY--> directory not found ${arg}")
ENDIF(EXISTS ${arg})
ENDMACRO(pK_ADD_SUBDIRECTORY arg)

# -------------------------------------------------------------------------------------------------------
# It creates a shell variable ${a3}${a2} with value ${a1}/${a2}
# Example: with a1=Signal, a2=bin, a3=Signal_ the variable Signal_bin is created with Signal/bin as value.
# -------------------------------------------------------------------------------------------------------
MACRO(MKVARIABLE a1 a2 a3)
  #print("MKVARIABLE parameters: ${a1}; ${a2}; ${a3}")
  SET(RESULT 0)
  IF(NOT DEFINED ${a3}${a2})
    SET(XX ${a1}/${a2})
    IF(EXISTS ${XX})
      # FOR tcsh on MacOS/Solrais the length of the shell variable name is limited.
      STRING(LENGTH ${a3}${a2} L)
      IF(L GREATER 30)
	MESSAGE(FATAL_ERROR "variable name too long:${a3}${a2} ... aborting")
      ENDIF(L GREATER 30)
      SET(${a3}${a2} ${XX})
      SET(RESULT 1)
      PRINT("Created Variable: ${a3}${a2}, value ${${a3}${a2}}")
    else(EXISTS ${XX})
      print("${a2} directory not found in ${a1}")
#      SET(${a3}${a2} __undef__)
    ENDIF(EXISTS ${XX})
  ENDIF(NOT DEFINED ${a3}${a2})
ENDMACRO(MKVARIABLE)

MACRO(GEN_COMMENT VFILE COM)
  FILE(APPEND ${VFILE} "${BEGIN_SHELL_COMMENT} ${COM} ${END_SHELL_COMMENT}\n")
ENDMACRO(GEN_COMMENT VFILE COM)

#--------------------------------------------------------------------------
MACRO( GEN_COMMENT_AUTOGEN VFILE)
  FILE(APPEND ${VFILE} "${BEGIN_SHELL_COMMENT} ----------------------------------------------- ${END_SHELL_COMMENT}\n")
  FILE(APPEND ${VFILE} "${BEGIN_SHELL_COMMENT} This file was automatically generated by cmake. ${END_SHELL_COMMENT}\n")
  FILE(APPEND ${VFILE} "${BEGIN_SHELL_COMMENT} Manual editing not recommended. ${END_SHELL_COMMENT}\n")
  FILE(APPEND ${VFILE} "${BEGIN_SHELL_COMMENT} ----------------------------------------------- ${END_SHELL_COMMENT}\n")
  FILE(APPEND ${VFILE} "\n")
ENDMACRO( GEN_COMMENT_AUTOGEN VFILE)
#--------------------------------------------------------------------------

MACRO(SETVARIABLES DIRS DIRFROM PREFIX FATHERNAMEDIR)
  SET(B FALSE)
  FOREACH(aDir ${DIRS})
    MKVARIABLE(${DIRFROM} ${aDir} ${PREFIX})
    IF(RESULT)
      SET(B TRUE)
    ENDIF(RESULT)
  ENDFOREACH(aDir)

  SET(X PKCONFIG AND B)
  MKCONFIG("${DIRS}" ${DIRFROM} ${PREFIX} ${FATHERNAMEDIR} ${X} )
  
ENDMACRO(SETVARIABLES)


MACRO(pK_MK_CMAKE_DIR DIRFROM)
  SET(YY ${DIRFROM}/cmake)
  IF(NOT EXISTS ${YY})
    FILE(MAKE_DIRECTORY ${YY})
  ELSE(NOT EXISTS ${YY})
    IF(NOT IS_DIRECTORY ${YY})
      MESSAGE(FATAL_ERROR "${YY} is not a directory!!!")
    ENDIF(NOT IS_DIRECTORY ${YY})
  ENDIF(NOT EXISTS ${YY})
ENDMACRO(pK_MK_CMAKE_DIR DIRFROM)

MACRO(DeclareComponent DIRFROM)
  IF(NOT DEFINED ${DIRFROM})
    SET(XX ${DIRFROM}/defs.cmake)
    PRINT(">>>>>>>>>>>>>>> DeclareComponent XX : ${XX}")
    IF(EXISTS ${XX})
      INCLUDE(${XX})
      pK_MK_CMAKE_DIR(${DIRFROM})
    ENDIF(EXISTS ${XX})
    SET(${DIRFROM} DEFINED)
  ENDIF(NOT DEFINED ${DIRFROM}) 
ENDMACRO(DeclareComponent)

MACRO(DeclareComponents DIRS DIRFROM)
  IF(NOT DEFINED ${DIRFROM})
    foreach(aDir ${DIRS})
      DeclareComponent("${${DIRFROM}${aDir}}")
    endforeach(aDir)
    SET(${DIRFROM} DEFINED)
  ENDIF(NOT DEFINED ${DIRFROM})
ENDMACRO(DeclareComponents)



#It adds the suffix associated with a os to the operand NAME.
# For example, for windows it adds ".bat" to NAME.
MACRO (MK_CONFIG_NAME NAME CONFIG_FILE)
 IF(UNIX)
   SET(${CONFIG_FILE} ${NAME})
 ELSE(UNIX) # windows
   SET(${CONFIG_FILE} ${NAME}.bat)
 ENDIF(UNIX)
ENDMACRO (MK_CONFIG_NAME NAME CONFIG_FILE)

MACRO(SET_SHELL_DEFS)
  MK_CONFIG_NAME(_config_ PK_CONFIG_FILE)
  IF(UNIX)
    FIND_PROGRAM(TCSH tcsh)
    STRING(COMPARE EQUAL  ${TCSH} "TCSH-NOTFOUND" RES)
    IF(RES)
      MESSAGE(FATAL_ERROR "tcsh not found")
    ELSE(RES)
      SET (BEGIN_SHELL_COMMENT "#")
      SET (END_SHELL_COMMENT "")
      PRINT("tcsh found in: ${TCSH}")
    ENDIF(RES)
  ELSE(UNIX) # windows
    SET (BEGIN_SHELL_COMMENT "rem")
    SET (END_SHELL_COMMENT "")
  ENDIF(UNIX)
ENDMACRO(SET_SHELL_DEFS)


MACRO(SET_ARCHI)
  STRING(COMPARE EQUAL  ${CMAKE_SIZEOF_VOID_P} "8" RES)
  IF(RES)
    ADD_DEFINITIONS( -D_HAVE_64_BITS)
    MESSAGE ("ARCHI= 64 BITS")
  ELSE(RES)
    MESSAGE ("ARCHI= 32_BITS")
  ENDIF(RES)
ENDMACRO(SET_ARCHI)


MACRO(SET_HOST_DEFS)
  # ( "$pK_OS" == "solaris") then vHOST 0
  # ( "$pK_OS" == "linux") then vHOST 5
  # ( "$pK_OS" == "windows") then vHOST 10
  # ( "$pK_OS" == "macOs") then vHOST 15
  if( APPLE )
    ADD_DEFINITIONS( -DxKHOST=15 )
  ELSE( APPLE )
    if( UNIX )
      SET(STATIC_LINK_OPTION "-static")
      ADD_DEFINITIONS( -DxKHOST=5 )
    ELSE( UNIX )
      IF (MSVC)
	ADD_DEFINITIONS( -DxKHOST=10)  #window
      ELSE(MSVC)
	ADD_DEFINITIONS( -DxKHOST=-1)  #UNKNOWN
      ENDIF( MSVC )
    endif( UNIX )
  ENDIF( APPLE )
ENDMACRO(SET_HOST_DEFS)


MACRO(SET_CMAKE_PARAMETERS)
  set(CMAKE_VERBOSE_MAKEFILE ON) # OFF
  set(CMAKE_COLOR_MAKEFILE ON)   # to add Color on CMake Process 
ENDMACRO(SET_CMAKE_PARAMETERS)

MACRO(SETLITTLEENDIAN)
  INCLUDE(TestBigEndian)
  TEST_BIG_ENDIAN(XBIGENDIAN)
  PRINT("Test BIGENDIAN returns = ${XBIGENDIAN}")
  ADD_DEFINITIONS( -DLITTLEENDIAN=${XBIGENDIAN})
ENDMACRO(SETLITTLEENDIAN)

MACRO(MAKE_REF_SHELLVAR SHVAR REF_SHVAR)
 IF (UNIX)
   SET(${REF_SHVAR} "\$${SHVAR}")
 else (UNIX)
   SET(${REF_SHVAR} "%${SHVAR}%")
 endif (UNIX)
ENDMACRO(MAKE_REF_SHELLVAR SHVAR REF_SHVAR)


MACRO(ADD_PATH_SEPARATOR SHVAR REF_SHVAR)
  IF (UNIX)
    SET(${REF_SHVAR} "${SHVAR}/")
  ELSE (UNIX)
    SET(${REF_SHVAR} "${SHVAR}\\\\")
  ENDIF (UNIX)
ENDMACRO(ADD_PATH_SEPARATOR SHVAR REF_SHVAR)

# Configuration file.
MACRO(ADD_SHELL_VAR FILENAME SHVAR DEF PREFIX)
  IF(UNIX)
    FILE(APPEND ${FILENAME} "${PREFIX} setenv ${SHVAR} ${DEF}")
  ELSEIF(WIN32)
    FILE(APPEND ${FILENAME} "${PREFIX} set ${SHVAR}=${DEF}")
  ENDIF(UNIX)
  FILE(APPEND ${FILENAME} "\n")
ENDMACRO(ADD_SHELL_VAR FILENAME SHVAR DEF PREFIX)

# Defining a shell variable.
#   a1 : directory path,
#   a2 : sub-directory of a1,
#   a3: name of the variable defining a1,
#   a4: filename config.
#MK_CONFIG_VARIABLE(${DIRFROM} ${aDir} ${PREFIX} ${NAME_FILE_CONFIG})
MACRO(MK_CONFIG_VARIABLE a1 a2 a3 a4 FATHERNAMEDIR)
  SET(XX ${a1}/${a2})
  IF(EXISTS ${XX})
    SET(${a3}${a2} ${XX})
    MAKE_REF_SHELLVAR(${FATHERNAMEDIR} NAME)
    ADD_PATH_SEPARATOR(${NAME} NAME)
    ADD_SHELL_VAR(${a4} ${a3}${a2} "${NAME}${a2}" "")
    ADD_LOAD_SETENV(${a4} ${a3}${a2})
  else(EXISTS ${XX})
    print("${a2} directory not found in ${a1}")
  ENDIF(EXISTS ${XX})
ENDMACRO(MK_CONFIG_VARIABLE)


#----------------------------------------------------------------
MACRO(GEN_HEADER_SCRIPT  FILE)
  MESSAGE("Generating: ${FILE}")
  IF (UNIX)
    FILE(WRITE ${FILE} "${BEGIN_SHELL_COMMENT}!${TCSH}\n")
  ELSE(UNIX)
    FILE(WRITE ${FILE} "echo off \n")
  ENDIF(UNIX)
  GEN_COMMENT_AUTOGEN(${FILE}) # this file is auto generated....
ENDMACRO(GEN_HEADER_SCRIPT  FILE)

#---------------------------------------------------------------
MACRO(GEN_REQUIRE_SHELL_VAR VFILE SHVAR)
  IF(UNIX)
    FILE(APPEND ${VFILE} " if ( ! \$?${SHVAR} ) then \n")
    FILE(APPEND ${VFILE} "   echo \"##  ERROR  ## ${SHVAR} not defined\"\n")
    FILE(APPEND ${VFILE} "   echo \"  run <source sigaliEnv> in Sigali root directory\"\n")
    FILE(APPEND ${VFILE} "   exit\n")
    FILE(APPEND ${VFILE} " endif\n")
    FILE(APPEND ${VFILE} "\n")
  ELSE(UNIX) #WIN32
    FILE(APPEND ${VFILE} " if not defined ${SHVAR} (\n")
    FILE(APPEND ${VFILE} "   echo \"##  ERROR  ## ${SHVAR} not defined\"\n")
    FILE(APPEND ${VFILE} "   echo \"  run sigaliEnv.bat in Sigali root directory\"\n")
    FILE(APPEND ${VFILE} "   goto :eof\n")
    FILE(APPEND ${VFILE} " )\n")
    FILE(APPEND ${VFILE} "\n")
  ENDIF(UNIX)
ENDMACRO(GEN_REQUIRE_SHELL_VAR VFILE SHVAR)

#---------------------------------------------------------------
MACRO(GEN_INTEGER_SHELL_VAR_IF_NOTDEFINED VFILE SHVAR VALUE COM)
  IF(UNIX)
    FILE(APPEND ${VFILE} "# ${COM}")
    FILE(APPEND ${VFILE} " if ( ! \$?${SHVAR} ) then \n")
    ADD_SHELL_VAR(${VFILE} ${SHVAR} ${VALUE} "     ")
    FILE(APPEND ${VFILE} " endif\n")
  ELSE(UNIX)
    FILE(APPEND ${VFILE} "rem ${COM}")
    ADD_SHELL_VAR(${VFILE} ${SHVAR} ${VALUE} "     ")
  ENDIF(UNIX)
ENDMACRO(GEN_INTEGER_SHELL_VAR_IF_NOTDEFINED VFILE SHVAR VALUE COM)

#--------------------------------------------------------------------------------
# It generates in the file VFILE, the test of the existence of the file DIR/NFILE
#--------------------------------------------------------------------------------
MACRO(GEN_REQUIRE_FILE VFILE DIR NFILE )
   IF(UNIX)
     FILE(APPEND ${VFILE} " if (! -efr \"\${${DIR}}/${NFILE}\") then \n")
     FILE(APPEND ${VFILE} "    echo \" ERROR : cannot read file ${NFILE} in \${${DIR}}\"\n")
     FILE(APPEND ${VFILE} "    exit\n")
     FILE(APPEND ${VFILE} " endif\n")
   ELSE(UNIX)
     FILE(APPEND ${VFILE} " if not exist \"%${DIR}%\\${NFILE}\" ( \n")
     FILE(APPEND ${VFILE} "    @echo \" ERROR : cannot read file ${NFILE} in %${DIR}%\"\n")
     FILE(APPEND ${VFILE} "    goto :eof\n")
     FILE(APPEND ${VFILE} " )\n")
   ENDIF(UNIX)  
ENDMACRO(GEN_REQUIRE_FILE VFILE DIR NFILE )


#--------------------------------------------------------------------------------
# It generates in the file VFILE, the test of the existence of the directory DIR
#--------------------------------------------------------------------------------
MACRO(GEN_REQUIRE_DIR VFILE DIR )
  IF(UNIX)
    FILE(APPEND ${VFILE} " if (! -edr \"\${${DIR}}\") then \n")
    FILE(APPEND ${VFILE} "    echo \" ERROR : the directory \${${DIR}} does not exist\"\n")
    FILE(APPEND ${VFILE} "    exit\n")
    FILE(APPEND ${VFILE} " endif\n")
  ELSE(UNIX)
    FILE(APPEND ${VFILE} " if not exist \"%${DIR}%\" ( \n")
    FILE(APPEND ${VFILE} "    @echo \" ERROR : the directory %${DIR}% does not exist\"\n")
    FILE(APPEND ${VFILE} "    goto :eof\n")
    FILE(APPEND ${VFILE} " )\n")
  ENDIF(UNIX)
ENDMACRO(GEN_REQUIRE_DIR VFILE DIR )
#---------------------------------------------------------------
MACRO(BEGIN_CONFIG_FILE NAME_FILE_CONFIG)
  GEN_HEADER_SCRIPT(${NAME_FILE_CONFIG})
  IF(UNIX)
#    FILE(APPEND ${NAME_FILE_CONFIG} "# echo Loading: ${NAME_FILE_CONFIG}\n")
  ELSE(UNIX) #WIN32
    FILE(APPEND ${NAME_FILE_CONFIG} "@echo OFF\n")
  ENDIF(UNIX)
ENDMACRO(BEGIN_CONFIG_FILE NAME_FILE_CONFIG)

#---------------------------------------------------------------------------
MACRO(END_CONFIG_FILE NAME_FILE_CONFIG)

ENDMACRO(END_CONFIG_FILE NAME_FILE_CONFIG)

MACRO(MKCONFIG DIRS DIRFROM PREFIX FATHERNAMEDIR FORCED )
  SET(NAME_FILE_CONFIG ${DIRFROM}/${PK_CONFIG_FILE})
  IF(${FORCED})
    FILE(REMOVE ${NAME_FILE_CONFIG})
  ENDIF(${FORCED})

  IF(NOT EXISTS ${NAME_FILE_CONFIG})
    PRINT( "%%%%%%%%%%%%%%%%%%%%%%%%  MKCONFIG ${NAME_FILE_CONFIG}")
    BEGIN_CONFIG_FILE(${NAME_FILE_CONFIG})
    FOREACH(aDir ${DIRS})
      MK_CONFIG_VARIABLE(${DIRFROM} ${aDir} ${PREFIX} ${NAME_FILE_CONFIG} ${FATHERNAMEDIR})
    ENDFOREACH(aDir)
    END_CONFIG_FILE(${NAME_FILE_CONFIG})
  ENDIF(NOT EXISTS ${NAME_FILE_CONFIG})

ENDMACRO(MKCONFIG)

MACRO(ADD_LOAD_SETENV NAME_FILE_CONFIG SH_VAR)
  IF (UNIX)
    FILE(APPEND ${NAME_FILE_CONFIG} " if ( -ef \"\${${SH_VAR}}/${PK_CONFIG_FILE}\") then\n")
    FILE(APPEND ${NAME_FILE_CONFIG} "    source \${${SH_VAR}}/${PK_CONFIG_FILE}\n")
    FILE(APPEND ${NAME_FILE_CONFIG} " endif\n")
  ELSE (UNIX)
    FILE(APPEND ${NAME_FILE_CONFIG} " if exist \"%${SH_VAR}%\\${PK_CONFIG_FILE}\"  call \"%${SH_VAR}%\\${PK_CONFIG_FILE}\"\n")
  ENDIF (UNIX)
ENDMACRO(ADD_LOAD_SETENV NAME_FILE_CONFIG SH_VAR)


MACRO(SETEQUIV NAME1 NAME2 DIR)
  IF (PKCONFIG)
    SET(NAME_FILE_CONFIG ${DIR}/${PK_CONFIG_FILE})
    MAKE_REF_SHELLVAR(${NAME2} NAME)
    ADD_SHELL_VAR(${NAME_FILE_CONFIG} ${NAME1} "${NAME}" "")
  ENDIF (PKCONFIG)
ENDMACRO(SETEQUIV NAME1 NAME2 DIR)

# OSTR contains le path ISTH for the current OS.
# cmake works with the Linux syntax. So, for Windows it is necessary to modify it for the configuration file.
MACRO(MK_SYSTEM_PATH ISTR OSTR)
  IF(UNIX)
    SET(${OSTR} ${ISTR})
  ELSE(UNIX)
    STRING(REPLACE / \\\\  ${OSTR} "${ISTR}")
  ENDIF(UNIX)
ENDMACRO(MK_SYSTEM_PATH ISTR OSTR)
  
MACRO(ADD_EXECUTE_RIGHT CONFIG_FILE)
  IF(UNIX)
    EXECUTE_PROCESS(COMMAND chmod uo+rx ${CONFIG_FILE})
  ENDIF(UNIX)
ENDMACRO(ADD_EXECUTE_RIGHT CONFIG_FILE})

MACRO(GEN_CMAKE_CMD CONFIG_FILE WHERE  ARGUMENTS)
  IF(UNIX)
    FILE(APPEND ${CONFIG_FILE} " set xx=\$PWD \n")
    FILE(APPEND ${CONFIG_FILE} " cd \${${WHERE}}/cmake \n")

    FILE(APPEND ${CONFIG_FILE} " if (! -efr \"CMakeCache.txt\") then \n")
    FILE(APPEND ${CONFIG_FILE} "    cmake ..\n")
    FILE(APPEND ${CONFIG_FILE} " endif\n")

    FILE(APPEND ${CONFIG_FILE} " make \${${ARGUMENTS}} -s -i\n") 
    FILE(APPEND ${CONFIG_FILE} " cd \$xx \n")
    FILE(APPEND ${CONFIG_FILE} " unset xx \n")
  ELSE(UNIX)
    FILE(APPEND ${CONFIG_FILE} " set xx=%CD% \n")
    FILE(APPEND ${CONFIG_FILE} " cd \"%${WHERE}%\\cmake\" \n")

    FILE(APPEND ${CONFIG_FILE} " if not exist CMakeCache.txt (\n")
    FILE(APPEND ${CONFIG_FILE} "   cmake .. -G\"NMake Makefiles\"\n")
    FILE(APPEND ${CONFIG_FILE} " )\n")

    FILE(APPEND ${CONFIG_FILE} " nmake %${ARGUMENTS}% /i /s \n") 
    FILE(APPEND ${CONFIG_FILE} " cd %xx% \n")
    FILE(APPEND ${CONFIG_FILE} " set xx= \n")
    
  ENDIF(UNIX)
  ADD_EXECUTE_RIGHT(${CONFIG_FILE})
ENDMACRO(GEN_CMAKE_CMD CONFIG_FILE WHERE  ARGUMENTS)

MACRO(GEN_ARGUMENTS CONFIG_FILE OPTIONS DEFAULT_OPTIONS CMD)
# getting the string of the option list.
  LIST(LENGTH OPTIONS NB)
  SET(OPTIONS_STRING)
  IF(NB GREATER 0)
    FOREACH(I RANGE 1 ${NB})
      MATH(EXPR CUR "${I}-1")
      LIST(GET OPTIONS ${CUR} OPT)
      SET(OPTIONS_STRING "${OPTIONS_STRING} ${OPT}")
    ENDFOREACH(I RANGE 1 NB)
  ENDIF(NB GREATER 0) 
  STRING(REPLACE " " "|" XXX ${OPTIONS_STRING})
  
  IF(UNIX)
    FILE(APPEND ${CONFIG_FILE} " if ($# > 1) then\n")
    FILE(APPEND ${CONFIG_FILE} "    echo \"Wrong number of parameter, usage: ${CMD} [${XXX}]\"\n")
    FILE(APPEND ${CONFIG_FILE} "    exit\n")
    FILE(APPEND ${CONFIG_FILE} " endif\n")
    FILE(APPEND ${CONFIG_FILE} " if ($# == 0) then\n")
    FILE(APPEND ${CONFIG_FILE} "    set arguments=\"${DEFAULT_OPTIONS}\"\n")
    FILE(APPEND ${CONFIG_FILE} " else\n")
    
    IF(NB GREATER 0)
      FILE(APPEND ${CONFIG_FILE} " if ")
      IF(NB GREATER 1)
	FILE(APPEND ${CONFIG_FILE} "( ")
      ENDIF(NB GREATER 1)
      FOREACH(I RANGE 1 ${NB})
	MATH(EXPR CUR "${I}-1")
	LIST(GET OPTIONS ${CUR} OPT)
	FILE(APPEND ${CONFIG_FILE} "(\"\$1\"  != \"${OPT}\")")
	IF(${I} LESS NB)
	  FILE(APPEND ${CONFIG_FILE} " && ")
	ENDIF(${I} LESS NB)
      ENDFOREACH(I RANGE 1 N)
      IF(NB GREATER 1)
	FILE(APPEND ${CONFIG_FILE} " )")
      ENDIF(NB GREATER 1)	
      FILE(APPEND ${CONFIG_FILE} "    then\n")
      FILE(APPEND ${CONFIG_FILE} "       echo \"improper parameter: $1, usage: ${CMD} [${XXX}]\"\n")
      FILE(APPEND ${CONFIG_FILE} "       exit\n")
      FILE(APPEND ${CONFIG_FILE} "    else \n")
      FILE(APPEND ${CONFIG_FILE} "      set arguments=\$1\n")
      FILE(APPEND ${CONFIG_FILE} "    endif\n")
      FILE(APPEND ${CONFIG_FILE} " endif\n")
      FILE(APPEND ${CONFIG_FILE} "\n")
    ENDIF(NB GREATER 0) 
  ELSE(UNIX)
    FILE(APPEND ${CONFIG_FILE} " if not \"%2%\" == \"\" (\n")
    FILE(APPEND ${CONFIG_FILE} "    @echo \"Wrong number of parameter, usage: ${CMD} [${XXX}]\"\n")
    FILE(APPEND ${CONFIG_FILE} "    goto :eof\n")
    FILE(APPEND ${CONFIG_FILE} " )\n")
    FILE(APPEND ${CONFIG_FILE} " if \"%1%\" == \"\" (\n")
    FILE(APPEND ${CONFIG_FILE} "    set arguments=\"${DEFAULT_OPTIONS}\"\n")
#    FILE(APPEND ${CONFIG_FILE} "    set arguments=\"\"\n")
    FILE(APPEND ${CONFIG_FILE} "    goto fixedarg\n")
    FILE(APPEND ${CONFIG_FILE} " ) else (\n")
    IF(NB GREATER 0)

      FOREACH(I RANGE 1 ${NB})
	MATH(EXPR CUR "${I}-1")
	LIST(GET OPTIONS ${CUR} OPT)
	FILE(APPEND ${CONFIG_FILE} " if \"%1%\" == \"${OPT}\" goto okarg\n")
      ENDFOREACH(I RANGE 1 N)
      IF(NB GREATER 1)
	FILE(APPEND ${CONFIG_FILE} " )\n")
      ENDIF(NB GREATER 1)	
      FILE(APPEND ${CONFIG_FILE} " @echo \"improper parameter: %1%, usage: ${CMD} [${XXX}]\"\n")
      FILE(APPEND ${CONFIG_FILE} " goto :eof\n")
      FILE(APPEND ${CONFIG_FILE} " ")
      FILE(APPEND ${CONFIG_FILE} " :okarg\n")
      FILE(APPEND ${CONFIG_FILE} " set arguments=%1%\n")
      FILE(APPEND ${CONFIG_FILE} " :fixedarg\n")
      FILE(APPEND ${CONFIG_FILE} "\n")
    ENDIF(NB GREATER 0)
  ENDIF(UNIX) 
ENDMACRO(GEN_ARGUMENTS CONFIG_FILE OPTIONS DEFAULT_OPTIONS  CMD)

MACRO(GEN_ECHO_USE  CONFIG_FILE CMD OPTIONS MESSAGE)
  IF(UNIX)
    FILE(APPEND ${CONFIG_FILE} "echo \">>>> use ${CMD} ${OPTIONS} ${MESSAGE}\"\n")
  ENDIF(UNIX)
ENDMACRO(GEN_ECHO_USE  CONFIG_FILE CMD OPTIONS MESSAGE)


MACRO(GEN_ECHO CONFIG_FILE MESSAGE)
  IF(UNIX)
    FILE(APPEND ${CONFIG_FILE} "echo \"${MESSAGE}\"\n")
  ENDIF(UNIX)
ENDMACRO(GEN_ECHO CONFIG_FILE MESSAGE)


# Copying a file from INPUTDIR/FILENAME to OUTPUTDIR/FILENAME
MACRO(COPY_FILE INPUTDIR OUTPUTDIR FILENAME)
  ADD_CUSTOM_COMMAND(
    OUTPUT ${OUTPUTDIR}/${FILENAME}
    COMMAND ${CMAKE_COMMAND} -E echo_append "Copying...${INPUTDIR}/${FILENAME}"
    COMMAND ${CMAKE_COMMAND} -E copy ${INPUTDIR}/${FILENAME} ${OUTPUTDIR}/${FILENAME}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    DEPENDS ${INPUTDIR}/${FILENAME}
    )
ENDMACRO(COPY_FILE INPUTDIR OUTPUTDIR FILENAME)


MACRO (GEN_CMD_ECHO WHERE FILENAME CODE STATUS_VALUE)
  MK_CONFIG_NAME(${FILENAME} CONFIG_NAME)
  SET(CONFIG_FILE ${WHERE}/${CONFIG_NAME})
  GEN_HEADER_SCRIPT(${CONFIG_FILE})
  
  IF(UNIX)
    GEN_ECHO(${CONFIG_FILE} "%%  ${CODE}  %% $1")
    FILE(APPEND ${CONFIG_FILE} "if ( $# == 2 ) echo \"              $2\"\n")
    FILE(APPEND ${CONFIG_FILE} "setenv xKStatus ${STATUS_VALUE}")
  ENDIF(UNIX)

  ADD_EXECUTE_RIGHT(${CONFIG_FILE})

ENDMACRO (GEN_CMD_ECHO WHERE FILENAME CODE STATUS_VALUE)


#------------------------------------------------------------------
# It generates in the CONFIG_FILE file
# - the test of the existence of the shell variable WHERE
# - the deletion of the CMAKE cache in  WHERE/cmake directory;
# - the generation of the call to WHERE/CMD_NAME 
#------------------------------------------------------------------
MACRO(GEN_INSTALL_CMD CONFIG_FILE WHERE CMD_NAME)
  GEN_REQUIRE_SHELL_VAR(${CONFIG_FILE} ${WHERE})

  IF(UNIX)
    FILE(APPEND ${CONFIG_FILE} "\\rm -f \${${WHERE}}/cmake/CMakeCache.txt\n")
    FILE(APPEND ${CONFIG_FILE} "\${${WHERE}}/${CMD_NAME} $*\n")
  ELSE(UNIX)
    #WINDOWS
    FILE(APPEND ${CONFIG_FILE} "del \"%${WHERE}%\\cmake\\CMakeCache.txt\"\n")
    FILE(APPEND ${CONFIG_FILE} "call \"%${WHERE}%\\${CMD_NAME}.bat %1%\"\n")
  ENDIF(UNIX)
ENDMACRO(GEN_INSTALL_CMD CONFIG_FILE WHERE CMD_NAME)

# -------------------------------------------------------------
# It generates the _install_[.bat] file (command). 
# This script must be executed to build the soft from scratch.
# -------------------------------------------------------------
MACRO(GEN_INSTALL_SCRIPT )
  MK_CONFIG_NAME(_install_ CONFIG_NAME)
  SET(CONFIG_FILE ${Sigali_root}/${CONFIG_NAME})
  GEN_HEADER_SCRIPT(${CONFIG_FILE})
  ADD_EXECUTE_RIGHT(${CONFIG_FILE})
  IF(UNIX)
    FILE(APPEND ${CONFIG_FILE} "source ${pkEnvFile}\n")
  ELSE(UNIX)
    FILE(APPEND ${CONFIG_FILE} "call ${pkEnvFile}\n")
  ENDIF(UNIX)
  GEN_INSTALL_CMD(${CONFIG_FILE} Sigali_package makeSigali)
  GEN_INSTALL_CMD(${CONFIG_FILE} Sigali_Synthesis makeResolver)
ENDMACRO (GEN_INSTALL_SCRIPT )

