
/**   \mainpage Supervisory Control Problem: Demo directory

      Contents:
      - \ref sectA "Directory contents"
      - \ref sectB "How to rebuild the complete demo"

\section sectA Directory contents

In this directory, you will find the following files and directory:

 - \b AAREADME The directory of the documentation.

 -  \b vt.gpk is the main Signal file. It  has to be loaded by the graphical user interface "polychrony". 
    This Signal program contains different processes. \n
	|\n
	|- CONTEXT: used to perform Simulation  \n
	|\n
	|- VT_\Foo: your application\n
	|\n
	|- vt: This process is simply  the process VT_\Foo
          to which  you add some  SIGALI functions and/or some  assertions that
          have to be checked by the inputs. The name is the same for technical
          reasons than the main program. This is this one that you have to compile 
	  in order to obtain the corresponding polynomial dynamical system on which 
	  synthesis will be performed. 

 -  \b vt.sim, \b vt.res are file generated by Sigali in order to perform simulation. They contains in a internal
	 format the result of the sigali computations (i.e. the controller). They will be used by the polychrony
	 tool to encapsulate the controller within the global Signal program (see below). \n
	 These files have been imported here from vt/ directory (see below).

 -  \b vt Directory used by the Polychrony compiler (code generation: c code, z3z code).


 -  \b vt.PAR Signal program parameters.

 -  \b Spec_Liaison.dir Directory that contains the C/JAVA inteface for the simulation.

 -  \b Demo Directory that contains some specific java programs for the simulation.

 -  \b vt.SIG.SIG generated Signal program (with the resolver), see \ref sectB.

Unix:

 -  \b makeLib script that
            - compiles the Signal program  automatically produced after the "resolver importation"
                under polychrony Graphical user Interface,
            - then produces the dynamic library for the simulation.
            - then generates a dynamic library for simulation (libVTAGVLIB.* file).
 -  \b Makefile,Makefile_MacOs: makefile description, referenced by makeLib command.
 -  \b run_demo script used for launching the demo.

Windows:
 -  \b makeLib.bat Similar to makeLib for Windows. Generated library: VTAGVLIB.dll
 -  \b Makefile.win Similar to Makefile for Windows.
 -  \b run_demo.bat script used for launching the demo.

\section sectB How to rebuild the complete demo

	-# Launch "polychrony" GUI and load vt.gpk file.
        -# Export le "internal" vt process as a textual file (for example vt.SIG as name).
        -# Compile the previous vt.SIG program with "z3z" option \n
                \verbatim
		 signal vt.SIG -z3z
                \endverbatim
           It generates in the sub-directory vt/ the vt.z3z and vt_CMD.z3z files. 
	   See \ref note "here for some modifications of vt.z3z file".	
              - vt.z3z contains the description of the synchronisations of the application.
	   (i.e the polynomial dynmical system encoding the application)
              - vt_CMD.z3z contains all the Sigali commands that have been written 
	   in the SIGNAL program.
        -# Go to the vt subdirectory and call sigali tool
            execute (under sigali) the following commands	    
	    \verbatim
	       ----------------
	       set_reorder(2); 
               read("vt_CMD.z3z");
               quit();
	       ----------------
	     \endverbatim
	    -> set_reorder(?) perform an automatic reordering of the underlying BDD. 
	       For some applications it is better to use set_reorder(1); (another
	       kind of reordering). 
        -# At this point, the  files vt.sim and vt.res must have been generated.
        -# Goto the root directory of the example (i.e. up directory)
        -# Copy the vt.sim and vt.res (generated in 4) in the "current" directory.
        -# Under polychrony GUI, goto the vt_\Foo process and load the resolver by the 
           following command \n
                "Tools -> prove -> build_resolv " command.\n
           After this command, the file \b vt.SIG.SIG has been generated.\n
           \b IMPORTANT: Do not save the program (vt.gpk) after this action (as this program, contains
	   some hidden lines of Signal code that have been automatically added)
	-# Use the "makeLib" command (see above).
           This compilation will basically  produce a library that will be used
           further for the JAVA simulation. 
           (The compiler will produce some C files in vt directory...)
	-# For simulate, execute the command
              \verbatim
                run_demo
              \endverbatim

*/
